<?phpnamespace Respect\Stream;use ReflectionProperty;class ConnectionTest extends \PHPUnit_Framework_TestCase{    protected $object;    protected $readData = "Foo\nBar\nBaz\nBat";    protected function setUp()    {        $this->object = new Connection();        $mirror = new ReflectionProperty('Respect\Stream\Connection', 'resource');        $mirror->setAccessible(true);        $mirror->setValue(            $this->object,            fopen(                'data://text/plain;base64,' . base64_encode($this->readData),                'r'            )        );    }    public function testData()    {        $read = '';        $this->object->onData(function($data) use (&$read) {                $read .= $data;            }        );        $this->object->performRead();        $this->assertEquals($this->readData, $read);    }    public function testLines()    {        $lines = array();        $this->object->onLine(function ($l) use(&$lines) {                $lines[] = $l;            }        );        $this->object->performRead();        $this->assertEquals(4, count($lines));    }    public function testRegisterEvent()    {        $ev = $this->object->registerEvent('data', 'strlen');        $this->assertAttributeContains(            array('strlen'), 'eventListeners', $this->object        );        $this->assertEquals('strlen', $ev);    }    public function testHasEvent()    {        $ev = $this->object->registerEvent('data', 'strlen');        $this->assertAttributeContains(            array('strlen'), 'eventListeners', $this->object        );        $this->assertTrue($this->object->hasEvent('data'));        $this->assertFalse($this->object->hasEvent('brain'));    }    public function testRegisterEventOverloaded()    {        $ev = $this->object->onData('strlen');        $this->assertAttributeContains(            array('strlen'), 'eventListeners', $this->object        );        $this->assertEquals($ev, $this->object);    }    public function testUnregisterEvent()    {        $ev = $this->object->registerEvent('data', 'strlen');        $this->object->unregisterEvent('data', $ev);        $this->assertAttributeNotContains(            array('strlen'), 'eventListeners', $this->object        );    }    public function testCallEvent()    {        $called = false;        $this->object->onFooBar(function() use(&$called) {                $called = true;            }        );        $this->object->callEvent('fooBar');        $this->assertTrue($called);    }    public function testCallEvent2()    {        $called = 0;        $this->object->onFooBar(function() use(&$called) {                $called += 1;            }        );        $this->object->onFooBar(function() use(&$called) {                $called += 2;            }        );        $this->object->callEvent('fooBar');        $this->assertEquals(3, $called);    }}